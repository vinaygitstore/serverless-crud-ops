service: serverless-crud-ops

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ap-south-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}

custom:
  postsTableName: post-details-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  getUser:
    handler: src/api.getUser
    name: fetch-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: fetch/{userId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn
  createUser:
    handler: src/api.createUser
    name: create-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: create
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt PostsTable.Arn
  updateUser:
    handler: src/api.updateUser
    name: update-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: update/{userId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt PostsTable.Arn
  deleteUser:
    handler: src/api.deleteUser
    name: delete-user
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: delete/{userId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt PostsTable.Arn
  getAllUsers:
    handler: src/api.getAllUsers
    name: get-all-users
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: users
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt PostsTable.Arn

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
